//
//  BasicCleanViewController.swift
//  projectDiscount
//
//  Created by MacDetail on 17/7/2568 BE.
//  Copyright (c) 2568 BE ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

//üéØ ‡πÇ‡∏à‡∏ó‡∏¢‡πå:
//‡∏°‡∏µ‡∏õ‡∏∏‡πà‡∏° "Say Hello" ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏î‡πÅ‡∏•‡πâ‡∏ß‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° "Hello, [‡∏ä‡∏∑‡πà‡∏≠]" ‡∏ö‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠

//üóÇ ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå (Scene: Hello)
//Hello/
//‚îú‚îÄ‚îÄ HelloViewController.swift     // View
//‚îú‚îÄ‚îÄ HelloInteractor.swift         // Business Logic
//‚îú‚îÄ‚îÄ HelloPresenter.swift          // Presentation Logic
//‚îú‚îÄ‚îÄ HelloRouter.swift             // Routing
//‚îî‚îÄ‚îÄ HelloModels.swift             // Models


//Logic
protocol BasicCleanDisplayLogic: AnyObject
{
    // ‡πÅ‡∏Å‡πâ‡∏ä‡∏∑‡πà‡∏≠ View Model
//    func displaySomething(viewModel: BasicClean.Hello.ViewModel)
    func displayGreeting(viewModel: BasicClean.Hello.ViewModel.DisplayGreeting)
}

class BasicCleanViewController: UIViewController, BasicCleanDisplayLogic
{
  var interactor: BasicCleanBusinessLogic?
  var router: (NSObjectProtocol & BasicCleanRoutingLogic & BasicCleanDataPassing)?

  // MARK: Object lifecycle
  
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏õ‡∏∏‡πà‡∏°‡∏°‡∏≤‡∏Å‡πà‡∏≠‡∏ô
//    private let button = UIButton(type: .system)
//    private let label = UILabel()
    @IBOutlet weak var button: UIButton!
    @IBOutlet weak var label: UILabel!
    
    
  override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
  {
    super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    setup()
  }
  
  required init?(coder aDecoder: NSCoder)
  {
    super.init(coder: aDecoder)
    setup()
  }
  
  // MARK: Setup
  
  private func setup()
  {
    let viewController = self
    let interactor = BasicCleanInteractor()
    let presenter = BasicCleanPresenter()
    let router = BasicCleanRouter()
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    presenter.viewController = viewController
    router.viewController = viewController
    router.dataStore = interactor
  }
  
  // MARK: Routing
  
  override func prepare(for segue: UIStoryboardSegue, sender: Any?)
  {
    if let scene = segue.identifier {
      let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
      if let router = router, router.responds(to: selector) {
        router.perform(selector, with: segue)
      }
    }
  }
  
  // MARK: View lifecycle
  
  override func viewDidLoad()
  {
    super.viewDidLoad()
//    doSomething()
//      setupUI()
  }
  
  // MARK: Do something
  
  //@IBOutlet weak var nameTextField: UITextField!
  
//  func doSomething()
//  {
//      let request = BasicClean.Hello.Request.SayHello(name: "hello")
//    interactor?.doSomething(request: request)
//  }
  
    private func setupUI(){
        view.backgroundColor = .white
        button.setTitle("Say Hello", for: .normal)
        button.addTarget(self, action: #selector(didTapButton), for: .touchUpInside)
        label.textAlignment = .center
        
        view.addSubview(button)
        view.addSubview(label)
        
        // ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á
        NSLayoutConstraint.activate([
            button.centerXAnchor.constraint(equalTo: view.centerXAnchor),
            button.centerYAnchor.constraint(equalTo: view.centerYAnchor),
            
            label.topAnchor.constraint(equalTo: button.bottomAnchor, constant: 2.0),
            label.centerXAnchor.constraint(equalTo: view.centerXAnchor)
        ])
    }
    
    
    @IBAction func didTapButton(_ sender: Any) {
        print("hello tap")
        let request = BasicClean.Hello.Request.SayHello(name: "John")
        interactor?.sayHello(request: request)
    }
    //    @objc private func didTapButton() {
//        print("hello tap")
//        let request = BasicClean.Hello.Request.SayHello(name: "John")
//        interactor?.sayHello(request: request)
//    }
    
    func displayGreeting(viewModel: BasicClean.Hello.ViewModel.DisplayGreeting) {
        label.text = viewModel.message
    }
    
//  func displaySomething(viewModel: BasicClean.Hello.ViewModel)
//  {
//    //nameTextField.text = viewModel.name
//  }
}
